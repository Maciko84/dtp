async function dtp(e,t,n){const o=new WebSocket(t),r={main:e};function s(e,t=!1){const n=JSON.stringify({type:"error",message:e,critical:t});o.send(n),t&&o.close()}function a(e,t,n){n&&Array.isArray(n)&&n.forEach((n=>{n&&"string"==typeof n&&e.addEventListener(n,(function(e){o.send(JSON.stringify({type:"event",id:t,name:n}))}))}))}function i(e,t){for(const n of Object.keys(t))t[n]instanceof Object&&e[n]instanceof Object?i(e[n],t[n]):e[n]=t[n]}o.onmessage=function(e){let t;try{t=JSON.parse(e.data)}catch(e){return void s("Invalid message format",!0)}if("create"===t.type)try{t.mode&&t.props&&t.id||s("Invalid create message",!0);const e=document.createElement(t.mode);i(e,t.props),r[t.id]=e,a(e,t.id,t.events)}catch(e){s(`Create operation failed: ${e.message}`,!0)}else if("update"===t.type)try{const e=r[t.id];if(!e)return void s("Node not found",!0);i(e,t.props),a(e,t.events)}catch(e){s(`Update operation failed: ${e.message}`,!0)}else if("delete"===t.type)try{const e=r[t.id];if(!e||!e.parentNode)return void s("Node or parent not found",!0);e.parentNode.removeChild(e),delete r[t.id]}catch(e){s(`Delete operation failed: ${e.message}`,!0)}else if("set_parent"===t.type)try{const e=r[t.child_id],n=r[t.parent_id];if(!e||!n)return void s("Node or parent not found",!0);n.appendChild(e),e.parentNodeId=t.parent_id}catch(e){s(`Set parent operation failed: ${e.message}`,!0)}else if("get_parent"===t.type)try{if("main"!==t.id){const e=r[t.node_id]?.parentNodeId||null;o.send(JSON.stringify({type:"response",value:e}))}else o.send(JSON.stringify({type:"response",value:null}))}catch(e){s(`Get parent operation failed: ${e.message}`,!0)}else if("get_prop"===t.type)try{const e=r[t.id];if(!e)return void s("Node not found",!0);const a=(n=e,(t.path||"").split(".").reduce(((e,t)=>e&&e[t]),n));o.send(JSON.stringify({type:"response",value:a}))}catch(e){s(`Get property operation failed: ${e.message}`,!0)}else s("Unknown message type",!1);var n},o.onerror=e=>{s(`WebSocket error: ${e.message}`,!0)},o.onclose=()=>{},o.onopen=()=>{o.send(n)}}